{
  "settings_version": "0.19.0",
  "debug": true,
  "obsidian_command_palette_prefix": "Execute: ",
  "preview_variables_in_command_palette": true,
  "show_autocomplete_menu": true,
  "working_directory": "Sandbox",
  "default_shells": {
    "win32": "pwsh.exe",
    "linux": "/bin/bash",
    "darwin": "/bin/bash"
  },
  "environment_variable_path_augmentations": {
    "win32": "WindowsExtraPath1\n{{!environment:Path}}\nWindowsExtraPath2",
    "linux": "LinuxAndMacExtraPath"
  },
  "error_message_duration": 20,
  "notification_message_duration": 10,
  "execution_notification_mode": "if-long",
  "output_channel_clipboard_also_outputs_to_notification": true,
  "enable_events": true,
  "approve_modals_by_pressing_enter_key": true,
  "max_visible_lines_in_shell_command_fields": false,
  "shell_commands": [
    {
      "id": "c0wajcu2vp",
      "alias": "Git GUI",
      "confirm_execution": false,
      "ignore_error_codes": [
        259
      ],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "",
        "win32": "git-gui"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "c5oaftks00",
      "alias": "Git Bash",
      "ignore_error_codes": [],
      "confirm_execution": false,
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "",
        "win32": "cd .. && start \"\" \"%PROGRAMFILES%\\Git\\bin\\sh.exe\" --login"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "cvdgs01k3r",
      "alias": "Date and time {{date:YYYY-MM-DD HH:mm:ss}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Date and time: \"{{date:YYYY-MM-DD HH:mm:ss}} >> TestResults.md\n# 2023-03-25: This shell command is nowadays only used for testing variable parsing in Obsidian's command palette. It's not anymore executed in the typical testing process.",
        "win32": "echo \"Date and time: {{date:YYYY-MM-DD HH:mm:ss}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "kj1jupcn7k",
      "alias": "File name {{file_name}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"File name: \"{{file_name}} >> TestResults.md\n# 2023-03-25: This shell command is nowadays only used for testing variable parsing in Obsidian's command palette. It's not anymore executed in the typical testing process.",
        "win32": "echo \"File name: {{file_name}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "796vz9pyd6",
      "alias": "FINISH TEST",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "# Copy test results to the end of the test report file.\ncat TestResults.md >> \"../Performed tests/\"{{date:YYYY-MM-DD}}\" (incomplete).md\"\n\n# Sleep one second to make sure TestResults.md is not emptied before it's written to the report file.\nsleep 1\n\n# Clear the test results file's content.\necho -n \"\" > TestResults.md\n\n# Rename the test report file\ncd \"../Performed tests/\"\nmv {{date:YYYY-MM-DD}}\" (incomplete).md\" {{date:YYYY-MM-DD}}\\ \\({{_plugin_version}}\\)\\ {{_operating_system}}\\ {{_test_status}}.md\n\n# Sleep one second, otherwise the file opening may be tried before the file had time to rename.\nsleep 1\n\n# Open the renamed file in Obsidian (:-1 sets caret to the last line).\necho {{date:YYYY-MM-DD}}\\ \\({{_plugin_version}}\\)\\ {{_operating_system}}\\ {{_test_status}}.md:-1",
        "win32": "# Copy test results to the end of the test report file.\ntype TestResults.md >> \"..\\Performed tests\\{{date:YYYY-MM-DD}} (incomplete).md\"\n\n# Sleep one second to make sure TestResults.md is not emptied before it's written to the report file.\nsleep 1\n\n# Clear the test results file's content.\nWrite-Host -NoNewLine > TestResults.md\n\n# Rename the test report file\ncd \"..\\Performed tests\\\"\nren \"{{date:YYYY-MM-DD}} (incomplete).md\" \"{{date:YYYY-MM-DD}} ({{_plugin_version}}) {{_operating_system}} {{_test_status}}.md\"\n\n# Sleep one second, otherwise the file opening may be tried before the file had time to rename.\nsleep 1\n\n# Open the renamed file in Obsidian (:-1 sets caret to the last line).\necho \"{{date:YYYY-MM-DD}} ({{_plugin_version}}) {{_operating_system}} {{_test_status}}.md:-1\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [
        {
          "type": "prompt",
          "enabled": true,
          "prompt_id": "vams4z5e06"
        }
      ],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "h1i3hjdujv",
      "alias": "Test working directory",
      "ignore_error_codes": [],
      "confirm_execution": false,
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo Working directory: `pwd` >> {{vault_path}}\"/Sandbox/TestResults.md\"",
        "win32": "echo \"Working directory: $pwd\" >> \"{{vault_path}}\\Sandbox\\TestResults.md\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "ozilge8kih",
      "alias": "Character encoding test",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Test non-ASCII characters: Å Ä Ö\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "qm8y3vwg8k",
      "alias": "Test to ignore error code",
      "confirm_execution": false,
      "ignore_error_codes": [
        1,
        2
      ],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "cd NonExistingFolder"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "jjzgcfbnf6",
      "alias": "Terminal in test suite folder",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "",
        "linux": "cd {{vault_path}} && xfce4-terminal",
        "win32": "wt.exe -d \"{{vault_path}}\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "a3o2jzc1ju",
      "alias": "Git pull",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "modal"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Pulling...\"\ngit pull"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "rejgzfrnyz",
      "alias": "Test empty command",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "shells": {},
      "platform_specific_commands": {
        "default": ""
      },
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "qsmsyxhep0",
      "alias": "Test output insertion",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "current-file-caret",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo -n \"Text output test\"",
        "win32": "Write-Host -NoNewLine \"Text output test\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "ieb4t93yvb",
      "alias": "Terminal in plugin folder",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "",
        "linux": "cd {{vault_path}}/.obsidian/plugins/obsidian-shellcommands && xfce4-terminal",
        "win32": "wt.exe -d \"{{vault_path}}\\.obsidian\\plugins\\obsidian-shellcommands\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "imsi0fzrit",
      "alias": "Test output to stderr, with exit code 0",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"This goes to stderr\" >&2"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "1deq5274qk",
      "alias": "Test output to top",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "current-file-top",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"TEXT TO TOP\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "z7bdfzss6t",
      "alias": "Test output to bottom",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "current-file-bottom",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo -e \"\\nTEXT TO BOTTOM\"",
        "win32": "echo. && echo TEXT TO BOTTOM"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "5w4m6q8d8e",
      "alias": "Test output to status bar",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "status-bar",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Multiline output\" && echo \"hides earlier lines.\" && echo \"Only the last line is permanently displayed on the status bar.\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "5lk1z1h1ds",
      "alias": "Test output to clipboard",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "clipboard",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo -n \"Hello clipboard!\"",
        "win32": "Write-Host -NoNewLine \"Hello clipboard!\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "rw1rhziprx",
      "platform_specific_commands": {
        "default": "",
        "win32": "echo \"Windows command version executed.\" >> TestResults.md",
        "linux": "echo \"Linux command version executed.\" >> TestResults.md",
        "darwin": "echo \"macOS command version executed.\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Test operating system specific command",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "1w4y2bpbmk",
      "platform_specific_commands": {
        "default": "",
        "win32": "echo Windows shell should be CMD: %COMSPEC% >> TestResults.md"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "alias": "Test Windows shell: CMD",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "hml8qvuqrs",
      "platform_specific_commands": {
        "default": "",
        "win32": "\"PS5 version: \", $PSVersionTable.PSVersion.Major -join \"\" >> TestResults.md"
      },
      "shells": {
        "win32": "PowerShell.exe"
      },
      "alias": "Test Windows shell: PowerShell 5",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "r1erl29mnq",
      "platform_specific_commands": {
        "default": "",
        "win32": "\"PSCore version: \", $PSVersionTable.PSVersion.Major -join \"\" >> TestResults.md"
      },
      "shells": {
        "win32": "pwsh.exe"
      },
      "alias": "Test Windows shell: PowerShell Core",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "cxircsux3k",
      "platform_specific_commands": {
        "default": "",
        "linux": "echo \"Linux shell should be Bash: \"$(readlink /proc/$$/exe) >> TestResults.md",
        "darwin": "echo \"macOS shell should be Bash: \"$(readlink /proc/$$/exe) >> TestResults.md"
      },
      "shells": {
        "linux": "/bin/bash"
      },
      "alias": "Test Linux/Mac shell: Bash",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "0wuvfv0nzr",
      "platform_specific_commands": {
        "default": "",
        "linux": "echo \"Linux shell should be Zsh: \"$(readlink /proc/$$/exe) >> TestResults.md",
        "darwin": "echo \"macOS shell should be Zsh: \"$(readlink /proc/$$/exe) >> TestResults.md"
      },
      "shells": {
        "linux": "/bin/zsh"
      },
      "alias": "Test Linux/Mac shell: Zsh",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "cenx14cvbj",
      "platform_specific_commands": {
        "default": "git status"
      },
      "shells": {},
      "alias": "Git status",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "asdmfqbx5d",
      "alias": "Test $& variable",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Test $& variable: {{!passthrough:$&}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "dk2axoxhd0",
      "platform_specific_commands": {
        "default": "echo \"This should NOT be written to TestResults.md!!!\" {{passthrough:>>}} TestResults.md"
      },
      "shells": {},
      "alias": "Escaping test",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "pm9qf3zrfy",
      "platform_specific_commands": {
        "default": "",
        "linux": "echo \"Linux shell should be Dash: \"$(readlink /proc/$$/exe) >> TestResults.md",
        "darwin": "echo \"macOS shell should be Dash: \"$(readlink /proc/$$/exe) >> TestResults.md"
      },
      "shells": {
        "linux": "/bin/dash"
      },
      "alias": "Test Linux/Mac shell: Dash",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "n6pv34hx2j",
      "platform_specific_commands": {
        "default": "echo -n \"\" > TestResults.md",
        "win32": "break > TestResults.md"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "alias": "Reset TestResults.md",
      "confirm_execution": true,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "01jk6q6kt5",
      "platform_specific_commands": {
        "default": "echo \"Caret position: \"{{caret_position}}\" (line: \"{{caret_position:line}}\", column:\"{{caret_position:column}}\")\" >> TestResults.md",
        "win32": "echo \"Caret position: {{caret_position}} (line: {{caret_position:line}}, column:{{caret_position:column}})\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Caret position {{caret_position}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": "activity",
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "fsmbhs5vqc",
      "platform_specific_commands": {
        "default": "",
        "win32": "explorer {{vault_path}}\"\\.obsidian\\plugins\\obsidian-shellcommands\"",
        "linux": "xdg-open {{vault_path}}\"/.obsidian/plugins/obsidian-shellcommands\""
      },
      "shells": {},
      "alias": "Open the plugin folder in system explorer",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "uqdzrigs8x",
      "platform_specific_commands": {
        "default": "echo \"Event: After Obsidian starts\""
      },
      "shells": {},
      "alias": "Event: After Obsidian starts",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-layout-ready": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "lcyj918mbd",
      "platform_specific_commands": {
        "default": "echo \"Event: Before Obsidian quits\""
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "alias": "Event: Before Obsidian quits",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-quit": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "j7ihpidsj5",
      "platform_specific_commands": {
        "default": "echo \"Event: After switching the active pane: \"{{date:HH:mm:ss}}",
        "win32": "echo \"Event: After switching the active pane: {{date:HH:mm:ss}}\""
      },
      "shells": {},
      "alias": "Event: After switching the active pane",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "status-bar",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-active-leaf-changed": {
          "enabled": true
        },
        "every-n-seconds": {
          "enabled": false,
          "seconds": 60
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "xulk3kuuwl",
      "platform_specific_commands": {
        "default": "echo \"Event: Every 180 seconds\""
      },
      "shells": {},
      "alias": "Event: Every 180 seconds",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "every-n-seconds": {
          "enabled": true,
          "seconds": 180
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "otw4q2sw4g",
      "platform_specific_commands": {
        "default": "echo \"Event: File menu: \"{{event_file_name}}"
      },
      "shells": {},
      "alias": "Event: File menu: {{!event_file_name}}",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "file-menu": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "moil249jw3",
      "platform_specific_commands": {
        "default": "echo \"Event: Folder menu: \"{{event_folder_name}}"
      },
      "shells": {},
      "alias": "Event: Folder menu: {{!event_folder_name}}",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "folder-menu": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "k09kk76bzr",
      "platform_specific_commands": {
        "default": "echo \"Event: Editor menu\""
      },
      "shells": {},
      "alias": "Event: Editor menu",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "editor-menu": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "3iqc6o9wus",
      "platform_specific_commands": {
        "default": "echo \"MODAL OUTPUT\""
      },
      "shells": {},
      "alias": "Test output to modal",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "5hvv4ee88g",
      "platform_specific_commands": {
        "default": "echo \"Welcome.md:new-pane\""
      },
      "shells": {},
      "alias": "Test output using Open a file 1",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "ktaxv4ssfi",
      "platform_specific_commands": {
        "default": "echo \"README:2:3\""
      },
      "shells": {},
      "alias": "Test output using Open a file 2",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "iasi8j8isj",
      "platform_specific_commands": {
        "default": "echo \"Welcome.md : 4:1:4:-1 : 7:6:7:10 : 7:-10:9:5\""
      },
      "shells": {},
      "alias": "Test output using Open a file 3",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "ciijp65aag",
      "platform_specific_commands": {
        "default": "echo \"Sandbox/A file that did not exist before : can-create-file\""
      },
      "shells": {},
      "alias": "Test output using Open a file 4",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "awn0zh7t5u",
      "platform_specific_commands": {
        "default": "echo \"Welcome.md:new-tab\""
      },
      "shells": {},
      "alias": "Test output using Open a file 5",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "tlq9kj69h5",
      "platform_specific_commands": {
        "default": "echo \"Welcome.md:new-window\""
      },
      "shells": {},
      "alias": "Test output using Open a file 6",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "sr8mp9lpbb",
      "platform_specific_commands": {
        "default": "echo \"Two emojis: 🐓\"{{passthrough:🐓}} >> TestResults.md",
        "win32": "echo \"Two emojis: 🐓{{passthrough:🐓}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Two 🐓 emojis",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "modal"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "mx4gwfpu1h",
      "platform_specific_commands": {
        "default": "echo {{caret_position}} > caret_position.txt"
      },
      "shells": {},
      "alias": "Remember caret position",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-quit": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "d9ztrdqonw",
      "platform_specific_commands": {
        "default": "echo -n {{file_path:relative}}\\:; cat caret_position.txt",
        "win32": "Write-Host {{file_path:relative}}`: -NoNewLine; type caret_position.txt"
      },
      "shells": {},
      "alias": "Restore caret position",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "ignore"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-layout-ready": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "dqnuqf8fo4",
      "platform_specific_commands": {
        "default": "echo \"Day of week: \"{{date:dddd}} >> TestResults.md && echo \"Prompt mandatory field: \"{{_mandatory_field}} >> TestResults.md && echo \"Prompt field with a default value: \"{{_field_with_default_value}} >> TestResults.md && echo \"Prompt optional field: \"{{_optional_field}} >> TestResults.md && echo \"Prompt field using variables: \"{{_field_using_variables}} >> TestResults.md",
        "win32": "echo \"Day of week: {{date:dddd}}\" >> TestResults.md && echo \"Prompt mandatory field: {{_mandatory_field}}\" >> TestResults.md && echo \"Prompt field with a default value: {{_field_with_default_value}}\" >> TestResults.md && echo \"Prompt optional field: {{_optional_field}}\" >> TestResults.md && echo \"Prompt field using variables: {{_field_using_variables}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Test custom variables and a prompt",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [
        {
          "type": "prompt",
          "enabled": true,
          "prompt_id": "ikn3ruchpq"
        }
      ],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "9dcu9qimfz",
      "platform_specific_commands": {
        "default": "echo \"File created: \"{{event_file_name}} >> TestResults.md",
        "win32": "echo \"File created: {{event_file_name}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Event: File created",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "file-created": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "q2jo8zkrk2",
      "platform_specific_commands": {
        "default": "echo \"Folder created: \"{{event_folder_name}} >> TestResults.md",
        "win32": "echo \"Folder created: {{event_folder_name}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Event: Folder created",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "folder-created": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "pobjjezee1",
      "platform_specific_commands": {
        "default": "echo \"File deleted: \"{{event_file_name}} >> TestResults.md",
        "win32": "echo \"File deleted: {{event_file_name}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Event: File deleted",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "file-deleted": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "t6lwbz9l9p",
      "platform_specific_commands": {
        "default": "echo \"Folder deleted: \"{{event_folder_name}} >> TestResults.md",
        "win32": "echo \"Folder deleted: {{event_folder_name}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Event: Folder deleted",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "folder-deleted": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "gm9ssow0jg",
      "platform_specific_commands": {
        "default": "echo \"File content modified: \"{{event_file_name}}\\ \\({{date:HH:mm:ss}}\\)",
        "win32": "echo \"File content modified: {{event_file_name}} ({{date:HH:mm:ss}})\""
      },
      "shells": {},
      "alias": "Event: File content modified",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "status-bar",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "file-content-modified": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "s7qrtmjwpa",
      "platform_specific_commands": {
        "default": "echo \"File moved from \"{{event_old_file_path:relative}}\" to \"{{event_file_path:relative}} >> TestResults.md",
        "win32": "echo \"File moved from {{event_old_file_path:relative}} to {{event_file_path:relative}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Event: File moved",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "file-moved": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "z909n24dh6",
      "platform_specific_commands": {
        "default": "echo \"Folder moved from \"{{event_old_folder_path:relative}}\" to \"{{event_folder_path:relative}}\" >> TestResults.md",
        "win32": "echo \"Folder moved from {{event_old_folder_path:relative}} to {{event_folder_path:relative}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Event: Folder moved",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "folder-moved": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "7njiczc7os",
      "platform_specific_commands": {
        "default": "echo \"File renamed from \"{{event_old_file_name}}\" to \"{{event_file_name}} >> TestResults.md",
        "win32": "echo \"File renamed from {{event_old_file_name}} to {{event_file_name}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Event: File renamed",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "file-renamed": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "2myyxj8sxk",
      "platform_specific_commands": {
        "default": "echo \"Folder renamed from \"{{event_old_folder_name}}\" to \"{{event_folder_name}} >> TestResults.md",
        "win32": "echo \"Folder renamed from {{event_old_folder_name}} to {{event_folder_name}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Event: Folder renamed",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "folder-renamed": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "2sb4p6r9b4",
      "platform_specific_commands": {
        "default": "echo \"Custom variable 1: \"{{_uri_custom_variable_1}} >> TestResults.md && echo \"Custom variable 2: \"{{_uri_custom_variable_2}} >> TestResults.md",
        "win32": "echo \"Custom variable 1: {{_uri_custom_variable_1}}\" >> TestResults.md && \"Custom variable 2: {{_uri_custom_variable_2}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Test Shell commands URI",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "g7gauo1ds6",
      "platform_specific_commands": {
        "default": "echo \"PATH (Linux/macOS): \"$PATH",
        "win32": "echo \"PATH (Windows): \"$Env:Path"
      },
      "shells": {},
      "alias": "Test PATH additions",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "modal"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "y2dtq5wuxy",
      "platform_specific_commands": {
        "default": "echo Multiline >> TestResults.md\necho shell >> TestResults.md\necho command >> TestResults.md"
      },
      "shells": {},
      "alias": "Test multiline shell command",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "icon": null,
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "au049jz2sy",
      "platform_specific_commands": {
        "default": "echo -e \"$(cat)\"",
        "win32": "$OFS = \"`r`n\"\necho \"$Input\""
      },
      "shells": {},
      "alias": "Test {{file content}}",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": "{{file_content}}"
      }
    },
    {
      "id": "zcxdt1jp1f",
      "platform_specific_commands": {
        "default": "echo -e \"$(cat)\"",
        "win32": "$OFS = \"`r`n\"\necho \"$Input\""
      },
      "shells": {},
      "alias": "Test {{note content}}",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": "{{note_content}}"
      }
    },
    {
      "id": "2jk7adqi4s",
      "platform_specific_commands": {
        "default": "sleep 5\necho \"Waited for 5 seconds.\""
      },
      "shells": {},
      "alias": "A long running shell command",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "morocg0jlo",
      "platform_specific_commands": {
        "default": "echo \"Output wrapped in code block.\""
      },
      "shells": {},
      "alias": "Test output wrapping",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": "w85m6up4bg",
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "buffered",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "tm2ulm7r2m",
      "platform_specific_commands": {
        "default": "echo \"Realtime 1\"\nsleep 1\necho \"Realtime 2\"\nsleep 1\necho \"Realtime 3\"\nsleep 1\necho \"Realtime 4\"\nsleep 1\necho \"Realtime 5\""
      },
      "shells": {},
      "alias": "Realtime test: Notification balloon",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "st8k313wkf",
      "platform_specific_commands": {
        "default": "echo \"Realtime 1\" >&2\nsleep 1\necho \"Realtime 2\" >&2\nsleep 1\necho \"Realtime 3\" >&2\nsleep 1\necho \"Realtime 4\" >&2\nsleep 1\necho \"Realtime 5\" >&2",
        "win32": "Write-Error \"Realtime 1\"\nsleep 1\nWrite-Error \"Realtime 2\"\nsleep 1\nWrite-Error \"Realtime 3\"\nsleep 1\nWrite-Error \"Realtime 4\"\nsleep 1\nWrite-Error \"Realtime 5\""
      },
      "shells": {},
      "alias": "Realtime test: Error balloon",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "9en7d3rlok",
      "platform_specific_commands": {
        "default": "echo \"Realtime 1: Caret position\"\nsleep 1\necho \"Realtime 2: Caret position\"\nsleep 1\necho \"Realtime 3: Caret position\"\nsleep 1\necho \"Realtime 4: Caret position\"\nsleep 1\necho \"Realtime 5: Caret position\""
      },
      "shells": {},
      "alias": "Realtime test: Current file: caret position",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "current-file-caret",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "m1o9ar2af9",
      "platform_specific_commands": {
        "default": "echo \"Realtime 1: Top\"\nsleep 1\necho \"Realtime 2: Top\"\nsleep 1\necho \"Realtime 3: Top\"\nsleep 1\necho \"Realtime 4: Top\"\nsleep 1\necho \"Realtime 5: Top\""
      },
      "shells": {},
      "alias": "Realtime test: Current file: top",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "current-file-top",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "hi205zajc3",
      "platform_specific_commands": {
        "default": "echo \"Realtime 1: Bottom\"\nsleep 1\necho \"Realtime 2: Bottom\"\nsleep 1\necho \"Realtime 3: Bottom\"\nsleep 1\necho \"Realtime 4: Bottom\"\nsleep 1\necho \"Realtime 5: Bottom\""
      },
      "shells": {},
      "alias": "Realtime test: Current file: bottom",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "current-file-bottom",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "x9mb2l65cf",
      "platform_specific_commands": {
        "default": "echo \"Welcome.md:new-window\"\nsleep 1\necho \"Welcome.md:new-tab\"\nsleep 1\necho \"Welcome.md:new-tab\"\nsleep 1\necho \"Welcome.md:new-tab\"\nsleep 1\necho \"Welcome.md:new-tab\""
      },
      "shells": {},
      "alias": "Realtime test: Open files",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "9a98pvcn6p",
      "platform_specific_commands": {
        "default": "echo \"Realtime 1\"\nsleep 1\necho \"Realtime 2\"\nsleep 1\necho \"Realtime 3\"\nsleep 1\necho \"Realtime 4\"\nsleep 1\necho \"Realtime 5\""
      },
      "shells": {},
      "alias": "Realtime test: Status bar",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "status-bar",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "risjcw3y5m",
      "platform_specific_commands": {
        "default": "echo \"Realtime 1\"\nsleep 1\necho \"Realtime 2\"\nsleep 1\necho \"Realtime 3\"\nsleep 1\necho \"Realtime 4\"\nsleep 1\necho \"Realtime 5\""
      },
      "shells": {},
      "alias": "Realtime test: Clipboard",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "clipboard",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "vn29xcs8xs",
      "platform_specific_commands": {
        "default": "echo \"Realtime 1\"\nsleep 1\necho \"Realtime 2\"\nsleep 1\necho \"Realtime 3\"\nsleep 1\necho \"Realtime 4\"\nsleep 1\necho \"Realtime 5\""
      },
      "shells": {},
      "alias": "Realtime test: Ask after execution",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "output_handling_mode": "realtime",
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "umqymtjrfc",
      "platform_specific_commands": {
        "default": "echo \"Builtin variable's global default value: {{event_title}}\" >> TestResults.md\necho \"Custom variable's global default value: {{_variable_with_default_value}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Test globally default values",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "1d5ti6wqbp",
      "platform_specific_commands": {
        "default": "echo -e \"$(cat)\"",
        "win32": "$OFS = \"`r`n\"\necho \"$Input\""
      },
      "shells": {},
      "alias": "Test file menu event variables (excluding event_file_content and event_note_content)",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": "event_file_extension:with-dot = {{event_file_extension:with-dot}}\nevent_file_name = {{event_file_name}}\nevent_file_path:absolute = {{event_file_path:absolute}}\nevent_file_uri = {{event_file_uri}}\nevent_folder_name = {{event_folder_name}}\nevent_folder_path:absolute = {{event_folder_path:absolute}}\nevent_tags:,  = {{event_tags:, }}\nevent_title = {{event_title}}\nevent_yaml_content:with-dashes = {{event_yaml_content:with-dashes}}\nevent_yaml_value:yaml_test1.first_item = {{event_yaml_value:yaml_test1.first_item}}"
      },
      "output_channels": {
        "stdout": "modal",
        "stderr": "modal"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "events": {
        "file-menu": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "7fn65l4j2m",
      "platform_specific_commands": {
        "default": "",
        "win32": "# Use printf instead of echo, because echo works in PowerShell and CMD.EXE, but printf doesn't, so it's a good breaker to notice if this command is accidentally executed in PowerShell/CMD.EXE instead of WSL.\nprintf \"Hello from WSL!\\n\" >> TestResults.md\nprintf \"You wanted to output this: \"{{_wsl_test_variable}}\"\\n\" >> TestResults.md\nprintf \"Variable escaping should use unix style escaping: \"{{passthrough:+-*/}}\"\\n\" >> TestResults.md"
      },
      "shells": {
        "win32": "k73ibys6zs"
      },
      "alias": "WSL test",
      "icon": "activity",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "realtime",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [
        {
          "type": "prompt",
          "enabled": true,
          "prompt_id": "5g487gw0fo"
        }
      ],
      "variable_default_values": {},
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "a437tpl07p",
      "platform_specific_commands": {
        "default": "",
        "win32": "# Use printf instead of echo, because echo works in PowerShell and CMD.EXE, but printf doesn't, so it's a good breaker to notice if this command is accidentally executed in PowerShell/CMD.EXE instead of MinGW-w64.\nprintf \"Hello from MinGW-w64!\\n\" >> TestResults.md\nprintf \"Vault path: \"{{vault_path}}\"\\n\" >> TestResults.md\nprintf \"Variable escaping should use unix style escaping: \"{{passthrough:+-*/}}\"\\n\" >> TestResults.md"
      },
      "shells": {
        "win32": "i66xg4nnvs"
      },
      "alias": "MinGW-w64 test",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {},
      "input_contents": {
        "stdin": null
      }
    },
    {
      "id": "9b3bkhu159",
      "platform_specific_commands": {
        "default": "",
        "linux": "# Use echo. instead of normal echo, because echo works in Bash etc, but echo. doesn't, so it's a good breaker to notice if this command is accidentally executed in Bash instead of Wine+CMD.EXE.\necho. Hello from CMD.EXE via Wine! >> TestResults.md"
      },
      "shells": {
        "linux": "shi0niw9u9"
      },
      "alias": "Wine + CMD.EXE test",
      "icon": null,
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    {
      "id": "zonkcdyhxn",
      "platform_specific_commands": {
        "default": "python3 ../Assets/Scripts/NormalVariableTests.py {{caret_paragraph}} {{clipboard}} {{date:YYYY-MM-DD HH:mm:ss}} {{file_extension:no-dot}} {{file_extension:with-dot}} {{file_name}} {{file_path:absolute}} {{file_path:relative}} {{file_uri}} {{folder_name}} {{folder_path:absolute}} {{folder_path:relative}} {{new_note_folder_name}} {{new_note_folder_path:absolute}} {{new_note_folder_path:relative}} {{selection}} {{tags:, }} {{title}} {{vault_path}} {{workspace}} {{yaml_content:no-dashes}} {{yaml_content:with-dashes}} {{yaml_value:yaml_test1.first_item}}.{{yaml_value:yaml_test1.middle_item.inner_item}}.{{yaml_value:yaml_test1.last_item}}.{{yaml_value:yaml_test2.0}}.{{yaml_value:yaml_test2.1}}.{{yaml_value:yaml_test2.-1}}.count:{{yaml_value:yaml_test2.length}} {{passthrough:>,.-;:§+´½!'\"#¤%&/()|=?`@`£$€{[]}\\\\¨^~*åäö*}} >> TestResults.md"
      },
      "shells": {},
      "alias": "Normal variable tests",
      "icon": "table",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": null
      },
      "output_channels": {
        "stdout": "notification",
        "stderr": "modal"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {
        "{{selection}}": {
          "type": "value",
          "value": "You forgot to select TESTSELECTION :("
        }
      }
    },
    {
      "id": "eazh80xkr2",
      "platform_specific_commands": {
        "default": "python3 ../Assets/Scripts/NewReportFile.py\nsleep 1\necho -n \"\" > TestResults.md",
        "win32": "python3 ../Assets/Scripts/NewReportFile.py\nStart-Sleep -Seconds 1\nWrite-Host -NoNewLine \"\" > TestResults.md"
      },
      "shells": {},
      "alias": "BEGIN TEST",
      "icon": "star",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "input_contents": {
        "stdin": "../Assets/Templates/Test report.template.md\n../Performed tests/{{date:YYYY-MM-DD}} (incomplete).md\n{{_test_author_name}}\n{{_operating_system}}\n{{_obsidian_version}}\n{{_plugin_version}}\nnew-tab"
      },
      "output_channels": {
        "stdout": "open-files",
        "stderr": "modal"
      },
      "output_wrappers": {
        "stdout": null,
        "stderr": null
      },
      "output_channel_order": "stdout-first",
      "output_handling_mode": "buffered",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [
        {
          "type": "prompt",
          "enabled": true,
          "prompt_id": "wiokq6mc0f"
        }
      ],
      "variable_default_values": {}
    }
  ],
  "prompts": [
    {
      "id": "ikn3ruchpq",
      "title": "Test prompt {{date:YYYY-MM-DD}}",
      "description": "Description for the test prompt.\n\nMake sure each of these description sentences appear on separate lines, with empty lines in-between.\n\nEnsure that the shell command preview below contains: Day of week: {{date:dddd}}",
      "preview_shell_command": true,
      "fields": [
        {
          "label": "Mandatory field",
          "description": "1. Try to submit the prompt without filling this, ensure an error message is shown saying that this field must be filled. 2. Type value: example",
          "default_value": "",
          "target_variable_id": "isv01gr33c",
          "required": true
        },
        {
          "label": "Field with a default value",
          "description": "Leave as-is.",
          "default_value": "Default",
          "target_variable_id": "4pw77r1izt",
          "required": true
        },
        {
          "label": "Optional field",
          "description": "Leave empty.",
          "default_value": "",
          "target_variable_id": "a8hvq53otu",
          "required": false
        },
        {
          "label": "Field using variables",
          "description": "Check that the value is the current year by default, and then add {{file_name}} to the end (using the file_name variable).",
          "default_value": "{{date:YYYY}} ",
          "target_variable_id": "zecw45agxe",
          "required": true
        }
      ],
      "execute_button_text": "Submit the values"
    },
    {
      "id": "vams4z5e06",
      "title": "Finish test",
      "description": "{{file_name}} will be renamed according to the input you give here.",
      "preview_shell_command": true,
      "fields": [
        {
          "label": "Plugin version",
          "description": "E.g. 0.5.0. If you are testing a version that is not yet published as a stable version, please add also a suffix describing the status, e.g. 0.7.0-beta1 (for public betas) or 0.7.0-development (for non-beta development versions, available only to me).",
          "default_value": "{{_plugin_version}}",
          "target_variable_id": "ax7fxgrmft",
          "required": true
        },
        {
          "label": "Operating system",
          "description": "Either Windows, Linux or macOS",
          "default_value": "",
          "target_variable_id": "kk420sww12",
          "required": true
        },
        {
          "label": "Test status",
          "description": "Type ok if all tests were successful, or FAILED if even just one test failed.",
          "default_value": "ok",
          "target_variable_id": "m6giquj5kc",
          "required": true
        }
      ],
      "execute_button_text": "Finish test"
    },
    {
      "id": "5g487gw0fo",
      "title": "WSL test prompt",
      "description": "Prompted when executing \"WSL test\".",
      "preview_shell_command": true,
      "fields": [
        {
          "label": "Output something from WSL",
          "description": "Type e.g. your name.",
          "default_value": "",
          "target_variable_id": "w9agfa690f",
          "required": true
        }
      ],
      "execute_button_text": "Execute"
    },
    {
      "id": "wiokq6mc0f",
      "title": "Begin test",
      "description": "Note that this script overwrites contents of the following files:\n - Sandbox/TestResults.md: The content is emptied.\n - Performed tests/{{date:YYYY-MM-DD}} (incomplete).md: Possible earlier content is replaced with content from Assets/Templates/Test report.template.md.",
      "preview_shell_command": false,
      "fields": [
        {
          "label": "Test author",
          "description": "Type you name/nick/link.",
          "default_value": "{{_test_author_name}}",
          "target_variable_id": "1onfw0lws9",
          "required": true
        },
        {
          "label": "Operating system name and version",
          "description": "E.g. Windows 10",
          "default_value": "{{_operating_system}}",
          "target_variable_id": "kk420sww12",
          "required": true
        },
        {
          "label": "Obsidian version",
          "description": "",
          "default_value": "{{_obsidian_version}}",
          "target_variable_id": "4hvy83w00o",
          "required": true
        },
        {
          "label": "Shell commands plugin version",
          "description": "",
          "default_value": "{{_plugin_version}}",
          "target_variable_id": "ax7fxgrmft",
          "required": true
        }
      ],
      "execute_button_text": "Create a new test report file"
    }
  ],
  "builtin_variables": {
    "{{event_title}}": {
      "default_value": {
        "type": "value",
        "value": "This is a global default value for {{event_title}}."
      }
    }
  },
  "custom_variables": [
    {
      "id": "isv01gr33c",
      "name": "mandatory_field",
      "description": "User should set this to 'example'.",
      "default_value": null
    },
    {
      "id": "4pw77r1izt",
      "name": "field_with_default_value",
      "description": "This should become 'Default'.",
      "default_value": null
    },
    {
      "id": "a8hvq53otu",
      "name": "optional_field",
      "description": "This should become an empty string.",
      "default_value": null
    },
    {
      "id": "zecw45agxe",
      "name": "field_using_variables",
      "description": "",
      "default_value": null
    },
    {
      "id": "ojzjfapyot",
      "name": "uri_custom_variable_1",
      "description": "Used in Shell commands URI testing.",
      "default_value": null
    },
    {
      "id": "nbwu2szvx5",
      "name": "uri_custom_variable_2",
      "description": "Used in Shell commands URI testing.",
      "default_value": null
    },
    {
      "id": "ax7fxgrmft",
      "name": "plugin_version",
      "description": "Used in FINISH TEST.",
      "default_value": {
        "type": "value",
        "value": ""
      }
    },
    {
      "id": "kk420sww12",
      "name": "operating_system",
      "description": "Used in FINISH TEST.",
      "default_value": {
        "type": "value",
        "value": ""
      }
    },
    {
      "id": "m6giquj5kc",
      "name": "test_status",
      "description": "Used in FINISH TEST.",
      "default_value": null
    },
    {
      "id": "pxwqdow8yp",
      "name": "variable_with_default_value",
      "description": "This variable is never planned to be assigned an actual value. It should always fall back to a default value.",
      "default_value": {
        "type": "value",
        "value": "This is a global default value for a custom variable."
      }
    },
    {
      "id": "w9agfa690f",
      "name": "wsl_test_variable",
      "description": "",
      "default_value": null
    },
    {
      "id": "4hvy83w00o",
      "name": "obsidian_version",
      "description": "",
      "default_value": {
        "type": "value",
        "value": ""
      }
    },
    {
      "id": "1onfw0lws9",
      "name": "test_author_name",
      "description": "",
      "default_value": {
        "type": "value",
        "value": ""
      }
    }
  ],
  "output_wrappers": [
    {
      "id": "w85m6up4bg",
      "title": "Code block",
      "content": "Executed on {{date:YYYY-MM-DD}}:\n```\n{{output}}\n```\nFile name: {{file_name}}"
    }
  ],
  "custom_shells": [
    {
      "id": "k73ibys6zs",
      "name": "Windows Subsystem for Linux (WSL)",
      "description": "\"WSL is a feature of Windows that allows developers to run a Linux environment without the need for a separate virtual machine or dual booting.\" (from: https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux)\n\nThis custom shell configuration allows you to execute Linux/Bash commands from Obsidian on Windows.\n\nInstall WSL: https://learn.microsoft.com/en-us/windows/wsl/install",
      "binary_path": "C:\\Windows\\System32\\wsl.exe",
      "shell_arguments": [
        "--",
        "{{!shell_command_content}}"
      ],
      "host_platform": "win32",
      "host_platform_configurations": {
        "win32": {
          "quote_shell_arguments": false
        }
      },
      "shell_platform": "linux",
      "escaper": "UnixShell",
      "path_translator": "const matches = absolutePath.match(/^([a-z]):\\/(.+)$/ui);\nconst driveLetter = matches[1];\nconst trailingPath = matches[2];\nreturn '/mnt/' + driveLetter.toLocaleLowerCase() + '/' + trailingPath;",
      "shell_command_wrapper": "echo \"Executing WSL in \"{{vault_path}}\":\" >> TestResults.md\n{{!shell_command_content}}\necho \"WSL executed.\" >> TestResults.md",
      "shell_command_test": "echo \"Hello $USER, current working directory is: $(pwd)\""
    },
    {
      "id": "i66xg4nnvs",
      "name": "MinGW-w64",
      "description": "\"Mingw-w64 is an advancement of the original mingw.org project, created to support the GCC compiler on Windows systems.\" (from: https://www.mingw-w64.org/)\n\nThis custom shell configuration allows you to execute some Linux/Bash commands from Obsidian on Windows.",
      "binary_path": "C:\\Program Files\\Git\\bin\\bash.exe",
      "shell_arguments": [
        "--login",
        "-c",
        "{{!shell_command_content}}"
      ],
      "host_platform": "win32",
      "host_platform_configurations": {
        "win32": {
          "quote_shell_arguments": true
        }
      },
      "shell_platform": "linux",
      "escaper": "UnixShell",
      "path_translator": "const matches = absolutePath.match(/^([a-z]):\\/(.+)$/ui);\nconst driveLetter = matches[1];\nconst trailingPath = matches[2];\nreturn '/' + driveLetter.toLocaleLowerCase() + '/' + trailingPath;",
      "shell_command_wrapper": null,
      "shell_command_test": "echo \"Hello, current working directory is: $(pwd)\""
    },
    {
      "id": "shi0niw9u9",
      "name": "Wine + CMD.EXE",
      "description": "\"Wine Is Not an Emulator\"",
      "binary_path": "wine",
      "shell_arguments": [
        "CMD.EXE",
        "/C",
        "{{!shell_command_content}}"
      ],
      "host_platform": "linux",
      "host_platform_configurations": {
        "win32": {
          "quote_shell_arguments": true
        }
      },
      "shell_platform": null,
      "escaper": "PowerShell",
      "path_translator": null,
      "shell_command_wrapper": null,
      "shell_command_test": "echo Current working directory: & cd & echo Vault path: {{vault_path}}"
    }
  ]
}