{
  "settings_version": "0.12.0",
  "debug": true,
  "obsidian_command_palette_prefix": "Execute: ",
  "preview_variables_in_command_palette": true,
  "show_autocomplete_menu": true,
  "working_directory": "Sandbox",
  "default_shells": {
    "win32": "pwsh.exe",
    "linux": "/bin/bash",
    "darwin": "/bin/bash"
  },
  "error_message_duration": 20,
  "notification_message_duration": 10,
  "output_channel_clipboard_also_outputs_to_notification": true,
  "enable_events": true,
  "shell_commands": {
    "0": {
      "alias": "Git GUI (No need to test)",
      "confirm_execution": false,
      "ignore_error_codes": [
        259
      ],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "",
        "win32": "git-gui"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {}
    },
    "1": {
      "alias": "Git Bash (No need to test)",
      "ignore_error_codes": [],
      "confirm_execution": false,
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "",
        "win32": "cd .. && start \"\" \"%PROGRAMFILES%\\Git\\bin\\sh.exe\" --login"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {}
    },
    "2": {
      "alias": "Clipboard {{clipboard}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Clipboard: \"{{clipboard}} >> TestResults.md",
        "win32": "echo \"Clipboard: {{clipboard}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "3": {
      "alias": "Date and time {{date:YYYY-MM-DD HH:mm:ss}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Date and time: \"{{date:YYYY-MM-DD HH:mm:ss}} >> TestResults.md",
        "win32": "echo \"Date and time: {{date:YYYY-MM-DD HH:mm:ss}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "4": {
      "alias": "File name {{file_name}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"File name: \"{{file_name}} >> TestResults.md",
        "win32": "echo \"File name: {{file_name}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "5": {
      "alias": "Absolute file path {{file_path:absolute}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Absolute file path: \"{{file_path:absolute}} >> TestResults.md",
        "win32": "echo \"Absolute file path: {{file_path:absolute}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "6": {
      "alias": "Relative file path {{file_path:relative}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Relative file path: \"{{file_path:relative}} >> TestResults.md",
        "win32": "echo \"Relative file path: {{file_path:relative}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "7": {
      "alias": "Folder name {{folder_name}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Folder name: \"{{folder_name}} >> TestResults.md",
        "win32": "echo \"Folder name: {{folder_name}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "8": {
      "alias": "Absolute folder path {{folder_path:absolute}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Absolute folder path: \"{{folder_path:absolute}} >> TestResults.md",
        "win32": "echo \"Absolute folder path: {{folder_path:absolute}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "9": {
      "alias": "Relative folder path {{folder_path:relative}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Relative folder path: \"{{folder_path:relative}} >> TestResults.md",
        "win32": "echo \"Relative folder path: {{folder_path:relative}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "10": {
      "alias": "Selection {{selection}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Selection: \"{{selection}} >> TestResults.md",
        "win32": "echo \"Selection: {{selection}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "11": {
      "alias": "Title {{title}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Title: \"{{title}} >> TestResults.md",
        "win32": "echo \"Title: {{title}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "12": {
      "alias": "Vault path {{vault_path}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Vault path: \"{{vault_path}} >> TestResults.md",
        "win32": "echo \"Vault path: {{vault_path}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "13": {
      "alias": "Workspace {{workspace}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Workspace: \"{{workspace}} >> TestResults.md",
        "win32": "echo \"Workspace: {{workspace}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "14": {
      "alias": "FINISH TEST",
      "confirm_execution": true,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "cat TestResults.md >> \"../Performed tests/\"{{date:YYYY-MM-DD}}\" (incomplete).md\" && echo -n \"\" > TestResults.md",
        "win32": "type TestResults.md >> \"..\\Performed tests\\{{date:YYYY-MM-DD}} (incomplete).md\" & break > TestResults.md"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "15": {
      "alias": "Test working directory",
      "ignore_error_codes": [],
      "confirm_execution": false,
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo Working directory: `pwd` >> {{vault_path}}\"/Sandbox/TestResults.md\"",
        "win32": "echo Working directory: $pwd.Path >> \"{{vault_path}}\\Sandbox\\TestResults.md\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "17": {
      "alias": "Character encoding test",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Test non-ASCII characters: Å Ä Ö\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "18": {
      "alias": "Test to ignore error code",
      "confirm_execution": false,
      "ignore_error_codes": [
        1,
        2
      ],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "cd NonExistingFolder"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "21": {
      "alias": "Terminal in test suite folder (No need to test)",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "",
        "linux": "cd {{vault_path}} && xfce4-terminal",
        "win32": "wt.exe -d \"{{vault_path}}\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {}
    },
    "22": {
      "alias": "Git pull (No need to test)",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "modal"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "git pull"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {}
    },
    "23": {
      "alias": "Test empty command",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "shells": {},
      "platform_specific_commands": {
        "default": ""
      },
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "24": {
      "alias": "Tags {{tags:, }} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Tags: \"{{tags:, }} >> TestResults.md",
        "win32": "echo \"Tags: {{tags:, }}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "26": {
      "alias": "Test output insertion",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "current-file-caret",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo -n \"Text output test\"",
        "win32": "echo \"Text output test\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "27": {
      "alias": "Terminal in plugin folder (No need to test)",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "",
        "linux": "cd {{vault_path}}/.obsidian/plugins/obsidian-shellcommands && xfce4-terminal",
        "win32": "wt.exe -d \"{{vault_path}}\\.obsidian\\plugins\\obsidian-shellcommands\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {}
    },
    "28": {
      "alias": "Test output to stderr, with exit code 0",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"This goes to stderr\" >&2"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "29": {
      "alias": "Test output to top",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "current-file-top",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"TEXT TO TOP\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "31": {
      "alias": "Test output to bottom",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "current-file-bottom",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo -e \"\\nTEXT TO BOTTOM\"",
        "win32": "echo. && echo TEXT TO BOTTOM"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "33": {
      "alias": "Test output to status bar",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "status-bar",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Multiline output\" && echo \"hides earlier lines.\" && echo \"Only the last line is permanently displayed on the status bar.\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "34": {
      "alias": "Test output to clipboard",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "clipboard",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Hello clipboard!\""
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "35": {
      "platform_specific_commands": {
        "default": "",
        "win32": "echo \"Windows command version executed.\" >> TestResults.md",
        "linux": "echo \"Linux command version executed.\" >> TestResults.md",
        "darwin": "echo \"Macintosh command version executed.\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Test operating system specific command",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "36": {
      "platform_specific_commands": {
        "default": "",
        "win32": "echo Windows shell should be CMD: %COMSPEC% >> TestResults.md"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "alias": "Test Windows shell: CMD",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "37": {
      "platform_specific_commands": {
        "default": "",
        "win32": "\"PS5 version: \", $PSVersionTable.PSVersion.Major -join \"\" >> TestResults.md"
      },
      "shells": {
        "win32": "PowerShell.exe"
      },
      "alias": "Test Windows shell: PowerShell 5",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "38": {
      "platform_specific_commands": {
        "default": "",
        "win32": "\"PSCore version: \", $PSVersionTable.PSVersion.Major -join \"\" >> TestResults.md"
      },
      "shells": {
        "win32": "pwsh.exe"
      },
      "alias": "Test Windows shell: PowerShell Core",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "39": {
      "platform_specific_commands": {
        "default": "",
        "linux": "echo \"Linux shell should be Bash: \"$(readlink /proc/$$/exe) >> TestResults.md",
        "darwin": "echo \"Macintosh shell should be Bash: \"$(readlink /proc/$$/exe) >> TestResults.md"
      },
      "shells": {
        "linux": "/bin/bash"
      },
      "alias": "Test Linux/Mac shell: Bash",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "40": {
      "platform_specific_commands": {
        "default": "",
        "linux": "echo \"Linux shell should be Zsh: \"$(readlink /proc/$$/exe) >> TestResults.md",
        "darwin": "echo \"Macintosh shell should be Zsh: \"$(readlink /proc/$$/exe) >> TestResults.md"
      },
      "shells": {
        "linux": "/bin/zsh"
      },
      "alias": "Test Linux/Mac shell: Zsh",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "41": {
      "platform_specific_commands": {
        "default": "git status --short"
      },
      "shells": {},
      "alias": "Git status (no need to test)",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "unlisted",
      "preactions": [],
      "variable_default_values": {}
    },
    "42": {
      "alias": "Test $& variable",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "platform_specific_commands": {
        "default": "echo \"Test $& variable: {{!passthrough:$&}}\" >> TestResults.md"
      },
      "shells": {},
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "43": {
      "platform_specific_commands": {
        "default": "echo \"Escaping test 1: \"{{passthrough:<>,.-;:§+´½!'\"#¤%&/()=?`@`£$€{[]}\\\\¨^~*åäö*}} >> TestResults.md"
      },
      "shells": {},
      "alias": "Escaping test 1",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "44": {
      "platform_specific_commands": {
        "default": "echo \"This should NOT be written to TestResults.md!!!\" {{passthrough:>>}} TestResults.md"
      },
      "shells": {},
      "alias": "Escaping test 2",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "45": {
      "platform_specific_commands": {
        "default": "",
        "linux": "echo \"Linux shell should be Dash: \"$(readlink /proc/$$/exe) >> TestResults.md",
        "darwin": "echo \"Macintosh shell should be Dash: \"$(readlink /proc/$$/exe) >> TestResults.md"
      },
      "shells": {
        "linux": "/bin/dash"
      },
      "alias": "Test Linux/Mac shell: Dash",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "46": {
      "platform_specific_commands": {
        "default": "echo -n \"\" > TestResults.md",
        "win32": "break > TestResults.md"
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "alias": "Reset TestResults.md",
      "confirm_execution": true,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "47": {
      "platform_specific_commands": {
        "default": "echo \"YAML test: A1. \"{{yaml_value:yaml_test1.first_item}}\" A2. \"{{yaml_value:yaml_test1.middle_item.inner_item}}\" A3. \"{{yaml_value:yaml_test1.last_item}}\" B) first: \"{{yaml_value:yaml_test2.0}}\" B) second: \"{{yaml_value:yaml_test2.1}}\" B) last: \"{{yaml_value:yaml_test2.-1}}\" B) count: \"{{yaml_value:yaml_test2.length}}  >> TestResults.md"
      },
      "shells": {},
      "alias": "Test YAML value",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "48": {
      "platform_specific_commands": {
        "default": "echo \"Caret position: \"{{caret_position}}\" (line: \"{{caret_position:line}}\", column:\"{{caret_position:column}}\")\" >> TestResults.md",
        "win32": "echo \"Caret position: {{caret_position}} (line: {{caret_position:line}}, column:{{caret_position:column}})\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Caret position {{caret_position}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "49": {
      "platform_specific_commands": {
        "default": "echo \"File extension: with dot: \"{{file_extension:with-dot}}\" / no dot: \"{{file_extension:no-dot}} >> TestResults.md"
      },
      "shells": {},
      "alias": "File extension {{file_extension:with-dot}}/{{file_extension:no-dot}} to file",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "50": {
      "platform_specific_commands": {
        "default": "",
        "win32": "explorer {{vault_path}}\"\\.obsidian\\plugins\\obsidian-shellcommands\"",
        "linux": "xdg-open {{vault_path}}\"/.obsidian/plugins/obsidian-shellcommands\""
      },
      "shells": {},
      "alias": "Open the plugin folder in system explorer",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "51": {
      "platform_specific_commands": {
        "default": "echo \"Event: After Obsidian starts\""
      },
      "shells": {},
      "alias": "Event: After Obsidian starts",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-layout-ready": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "52": {
      "platform_specific_commands": {
        "default": "echo \"Event: Before Obsidian quits\""
      },
      "shells": {
        "win32": "CMD.EXE"
      },
      "alias": "Event: Before Obsidian quits",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-quit": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "53": {
      "platform_specific_commands": {
        "default": "echo \"Event: After switching the active pane: \"{{date:HH:mm:ss}}",
        "win32": "echo \"Event: After switching the active pane: {{date:HH:mm:ss}}\""
      },
      "shells": {},
      "alias": "Event: After switching the active pane",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "status-bar",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-active-leaf-changed": {
          "enabled": true
        },
        "every-n-seconds": {
          "enabled": false,
          "seconds": 60
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "54": {
      "platform_specific_commands": {
        "default": "echo \"Event: Every 180 seconds\""
      },
      "shells": {},
      "alias": "Event: Every 180 seconds",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "every-n-seconds": {
          "enabled": true,
          "seconds": 180
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "55": {
      "platform_specific_commands": {
        "default": "echo \"Event: File menu: \"{{event_file_name}}"
      },
      "shells": {},
      "alias": "Event: File menu: {{event_file_name}}",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "file-menu": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "56": {
      "platform_specific_commands": {
        "default": "echo \"Event: Folder menu: \"{{event_folder_name}}"
      },
      "shells": {},
      "alias": "Event: Folder menu: {{event_folder_name}}",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "folder-menu": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "57": {
      "platform_specific_commands": {
        "default": "echo \"Event: Editor menu\""
      },
      "shells": {},
      "alias": "Event: Editor menu",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "notification",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "editor-menu": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "58": {
      "platform_specific_commands": {
        "default": "echo \"MODAL OUTPUT\""
      },
      "shells": {},
      "alias": "Test output to modal",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "59": {
      "platform_specific_commands": {
        "default": "echo \"Welcome.md:new-pane\""
      },
      "shells": {},
      "alias": "Test output using Open a file 1",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "60": {
      "platform_specific_commands": {
        "default": "echo \"README:2:3\""
      },
      "shells": {},
      "alias": "Test output using Open a file 2",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "61": {
      "platform_specific_commands": {
        "default": "echo \"Welcome.md : 1:1:1:-1 : 4:6:4:10 : 4:-10:6:5\""
      },
      "shells": {},
      "alias": "Test output using Open a file 3",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "62": {
      "platform_specific_commands": {
        "default": "echo \"Sandbox/A file that did not exist before : can-create-file\""
      },
      "shells": {},
      "alias": "Test output using Open a file 4",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "63": {
      "platform_specific_commands": {
        "default": "echo \"Two emojis: 🐓\"{{passthrough:🐓}} >> TestResults.md",
        "win32": "echo \"Two emojis: 🐓{{passthrough:🐓}}\" >> TestResults.md"
      },
      "shells": {},
      "alias": "Two 🐓 emojis",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "modal",
        "stderr": "modal"
      },
      "output_channel_order": "stdout-first",
      "events": {},
      "command_palette_availability": "enabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "64": {
      "platform_specific_commands": {
        "default": "echo {{caret_position}} > caret_position.txt"
      },
      "shells": {},
      "alias": "Remember caret position",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "ignore",
        "stderr": "notification"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-quit": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    },
    "65": {
      "platform_specific_commands": {
        "default": "echo -n {{file_path:relative}}\\:; cat caret_position.txt",
        "win32": "Write-Host {{file_path:relative}}`: -NoNewLine; type caret_position.txt"
      },
      "shells": {},
      "alias": "Restore caret position",
      "confirm_execution": false,
      "ignore_error_codes": [],
      "output_channels": {
        "stdout": "open-files",
        "stderr": "ignore"
      },
      "output_channel_order": "stdout-first",
      "events": {
        "on-layout-ready": {
          "enabled": true
        }
      },
      "command_palette_availability": "disabled",
      "preactions": [],
      "variable_default_values": {}
    }
  },
  "prompts": [],
  "custom_variables": []
}